source ./setup.vim

Describe command
	Before all
		call BeforeAll()
	End

	After all
		call AfterAll()
	End


	"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"


	Context BakaupEnable should be right functioned
	" {{{
		Before
			BakaupEnable
		End

		It create event
			Assert Equals(exists('#BakaupBackup'), 1)
		End

		Context fork a way to backup
			" {{{
			Before
				" {{{
				let l:new_file_name = localtime()
				let l:new_file_path = g:bakaup_backup_dir . '/' . l:new_file_name
				let l:insert_detail = 'abcde'

				let l:dailydir      = g:bakaup_backup_dir . '/' . strftime('%Y-%m-%d')
				let l:sub_extension = strftime(has('win32') ? '_at_%H-%M' : '_at_%H:%M')
				let l:backed_up_file_name = l:new_file_name . l:sub_extension
				let l:backed_up_file_path = l:dailydir . '/' . l:backed_up_file_name

				execute ':e' l:new_file_path
				execute ':normal! i' . l:insert_detail
				" }}}
			End

			After
				call system('rm -f ' . l:new_file_path)
			End

			It on opened file not existed
				" {{{
				" backed up current detail

				let l:before_detail = getline(1, '$')
				write
				let l:after_detail  = readfile(l:backed_up_file_path)

				Assert Equals(l:before_detail, l:after_detail)
				" }}}
			End

			It on opened file existed
				"{{{
				" backed up previous detail

				write
				let l:origin_file_detail = readfile(l:new_file_path)

				execute ':normal! i' . l:insert_detail
				write
				let l:backed_up_file_detail = readfile(l:backed_up_file_path)

				Assert Equals(l:backed_up_file_detail, l:origin_file_detail)
				"}}}
			End
			" }}}
		End
	" }}}
	End

	Context BakaupDisable should be right functioned
	" {{{
		It restore option
		" {{{
			let l:vim_backup = &backup
			BakaupEnable
			BakaupDisable
			Assert Equals(&backup, l:vim_backup)
		" }}}
		End

		It delete event
		" {{{
			BakaupDisable
			Assert Equals(exists('#BakaupBackup'), 0)
		" }}}
		End
	" }}}
	End

End
